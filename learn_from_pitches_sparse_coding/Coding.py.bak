import Image
import ImageOps
import numpy as np
from time import time
from sklearn.decomposition import SparseCoder
from time import time


#Convert the gray scale array to RGB array
def GrayArray2RGB(gray_array):
    gray_shape = gray_array.shape
    rgb_data = np.zeros((gray_shape[0], gray_shape[1], 3), dtype=gray_array.dtype)
    for c in range(3):
        rgb_data[:,:,c] = gray_array[:,:,0]
    return rgb_data
    
def CodeCroppedImage(patch_x_y, patch_size, dst_coded_array):
 	box = (x,y,x+patch_size[0],y+patch_size[1])
	crop_im = gray_im.crop(box)
	data = np.asarray(crop_im)
	data = data.reshape(1,data.size)
	coder = SparseCoder(dictionary=V, transform_algorithm='omp', transform_n_nonzero_coefs=10)
	u = coder.transform(data)
if __name__ == '__main__':
	t0 = time()
	#input image
	src_file = './imgs/im0115.jpg'
	patch_size = (8,8)
	V = np.load('./324 filters/Dictionaries(mini_8_8_6x6_100000).npy')
	im = Image.open(src_file)
	gray_im = ImageOps.grayscale(im)
	w = gray_im.size[0] - patch_size[0]
	h = gray_im.size[1] - patch_size[1]
	y = 0
	#dst_array = np.zeros( (gray_im.size[1], gray_im.size[0]) )
	while y <= h:
	    x = 0
	    while x <= w:
	        #crop patches
	        box = (x,y,x+patch_size[0],y+patch_size[1])
	        crop_im = gray_im.crop(box)
	
	        #store in array
	        data = np.asarray(crop_im)
	        data = data.reshape(1,data.size)
	
	        #Sparse Coding
	        #print "Coding ",x,y
	        coder = SparseCoder(dictionary=V, transform_algorithm='omp', transform_n_nonzero_coefs=10)
	        u = coder.transform(data)
	        #print u.shape
	        #print u
	        #s = np.dot(u, V)
	        #s = s.reshape(patch_size[1],patch_size[0])
	        #dst_array[y:y+patch_size[1], x:x+patch_size[0]] = s
	        x+=patch_size[0]
	    y+=patch_size[1]
	#dst_array = dst_array.reshape(gray_im.size[1],gray_im.size[0], 1)
	#rgb_data = GrayArray2RGB(dst_array)
	#im = Image.fromarray(np.uint8(rgb_data))
	#im.show()
	dt = time() - t0
	print 'done in %.2fs.' % dt

